{"ast":null,"code":"var _jsxFileName = \"/Users/Work/Documents/Projects/School/SS2022/ARCH8803/LIMW-Blue/bridge-viz-test/src/components/Animations/repeller.js\";\nimport Vector from 'vectory-lib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Repeller = () => {\n  const config = {\n    text: `Say something\n    positive.`,\n    widthToSpikeLengthRatio: 0.054\n  };\n  const colorConfig = {\n    particleOpacity: 0.2,\n    baseHue: 350,\n    hueRange: 9,\n    hueSpeed: 0.04,\n    colorSaturation: 100\n  };\n\n  class Planet {\n    constructor(x, y, g) {\n      this.pos = new Vector(x, y);\n      this.g = g;\n    }\n\n    draw() {\n      ctx.fillStyle = \"transparent\";\n      ctx.beginPath();\n      ctx.arc(this.pos.x, this.pos.y, 8, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n  } // A line that is part of forming the text\n\n\n  class Particle {\n    constructor(x, y) {\n      this.pos = new Vector(x, y);\n      this.vel = new Vector(0, spikeLength);\n    }\n\n    move(force) {\n      if (force) {\n        this.vel.addTo(force);\n      }\n\n      if (this.vel.getLength() > spikeLength) {\n        this.vel.setLength(spikeLength);\n      }\n    }\n\n    draw() {\n      ctx.beginPath();\n      ctx.moveTo(this.pos.x, this.pos.y);\n      let p2 = this.pos.add(this.vel);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n    }\n\n  }\n\n  let canvas;\n  let ctx;\n  let w, h;\n  let hue;\n  let particles;\n  let spikeLength;\n  let planets;\n  let A;\n  let B;\n  let a;\n  let b;\n  let tick;\n\n  function setup() {\n    tick = 0;\n    planets = [];\n    let len = Math.round(Math.random() * 3 + 3);\n\n    for (let i = 0; i < len; i++) {\n      let p = new Planet(50 + i * 100, 340, i ? 1000 : 4000);\n      planets.push(p);\n    }\n\n    canvas = document.querySelector(\"#repeller-canvas\");\n    ctx = canvas.getContext(\"2d\");\n    window.addEventListener(\"resize\", reset);\n    canvas.addEventListener(\"mousemove\", mousemove);\n    reset();\n  }\n\n  function reset() {\n    hue = colorConfig.baseHue;\n    w = canvas.width = window.innerWidth;\n    h = canvas.height = window.innerHeight;\n    spikeLength = w * config.widthToSpikeLengthRatio;\n    A = w / 2.2;\n    B = h / 2.2;\n    a = Math.round(Math.random() + 2);\n    b = Math.round(Math.random() + 2);\n    drawText();\n  }\n\n  function mousemove(event) {\n    let x = event.clientX;\n    let y = event.clientY;\n    planets[0].pos.x = x;\n    planets[0].pos.y = y;\n  }\n\n  function draw(now) {\n    clear();\n    requestAnimationFrame(draw);\n    updateParticles();\n    updatePlanets();\n    tick = now / 50;\n  }\n\n  function clear() {\n    ctx.clearRect(0, 0, w, h);\n  }\n\n  function drawText() {\n    ctx.save();\n    let fontSize = w * 0.2;\n    ctx.font = \"bold \" + fontSize + \"px Arial, Helvetica, sans-serif\";\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = \"white\";\n    ctx.strokeText(config.text, w / 2, h / 2);\n    ctx.restore();\n    let imageData = ctx.getImageData(0, 0, w, h);\n    particles = [];\n\n    for (let x = 0; x < w; x++) {\n      for (let y = 0; y < h; y++) {\n        let i = (x + w * y) * 4;\n        let average = (imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2] + imageData.data[i + 3]) / 4;\n\n        if (average > 200) {\n          let particle = new Particle(x, y);\n          particles.push(particle);\n        }\n      }\n    }\n\n    clear();\n  }\n\n  function updatePlanets() {\n    let len = planets.length;\n\n    for (let i = 1; i < len; i++) {\n      let angle = Math.PI * 2 / (len - 1) * i;\n      let x = A * Math.sin(a * tick / 100 + angle) + w / 2;\n      let y = B * Math.sin(b * tick / 100 + angle) + h / 2;\n      let p = planets[i];\n      p.pos.x = x;\n      p.pos.y = y;\n      p.draw();\n    }\n  }\n\n  function updateParticles() {\n    hue += colorConfig.hueSpeed;\n    let h = Math.sin(hue) * colorConfig.hueRange + colorConfig.baseHue;\n    ctx.strokeStyle = `hsla(${h}, ${colorConfig.colorSaturation}%, 50%, ${colorConfig.particleOpacity})`;\n    particles.forEach(p => {\n      // Apply the force of each planet (repeller) to the current particle\n      planets.forEach(planet => {\n        let d = p.pos.sub(planet.pos);\n        let length = d.getLength();\n        let g = planet.g / length;\n\n        if (g > 40) {\n          g = 40;\n        } // We keep the angle of the distance\n\n\n        d.setLength(g);\n        p.move(d);\n      });\n      p.draw();\n    });\n  }\n\n  console.log('fdasfs');\n  setup();\n  draw(1);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"repeller-canvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Repeller;\nexport default Repeller;\n\nvar _c;\n\n$RefreshReg$(_c, \"Repeller\");","map":{"version":3,"sources":["/Users/Work/Documents/Projects/School/SS2022/ARCH8803/LIMW-Blue/bridge-viz-test/src/components/Animations/repeller.js"],"names":["Vector","Repeller","config","text","widthToSpikeLengthRatio","colorConfig","particleOpacity","baseHue","hueRange","hueSpeed","colorSaturation","Planet","constructor","x","y","g","pos","draw","ctx","fillStyle","beginPath","arc","Math","PI","fill","Particle","vel","spikeLength","move","force","addTo","getLength","setLength","moveTo","p2","add","lineTo","stroke","canvas","w","h","hue","particles","planets","A","B","a","b","tick","setup","len","round","random","i","p","push","document","querySelector","getContext","window","addEventListener","reset","mousemove","width","innerWidth","height","innerHeight","drawText","event","clientX","clientY","now","clear","requestAnimationFrame","updateParticles","updatePlanets","clearRect","save","fontSize","font","textAlign","textBaseline","lineWidth","strokeStyle","strokeText","restore","imageData","getImageData","average","data","particle","length","angle","sin","forEach","planet","d","sub","console","log"],"mappings":"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","sourcesContent":["\nimport Vector from 'vectory-lib';\n\nconst Repeller  = () => {\n\n  const config = {\n    text: `Say something\n    positive.`,\n    widthToSpikeLengthRatio: 0.054\n  };\n  \n  const colorConfig = {\n    particleOpacity: 0.2,\n    baseHue: 350,\n    hueRange: 9,\n    hueSpeed: 0.04,\n    colorSaturation: 100,\n  };\n  \n  class Planet {\n    constructor(x, y, g) {\n      this.pos = new Vector(x, y);\n      this.g = g;\n    }\n    \n    draw() {\n      ctx.fillStyle = \"transparent\";\n      ctx.beginPath();\n      ctx.arc(this.pos.x, this.pos.y, 8, 0, Math.PI * 2);\n      ctx.fill();  \n    } \n  }\n  \n  // A line that is part of forming the text\n  class Particle {\n    constructor(x, y) {\n      this.pos = new Vector(x, y);\n      this.vel = new Vector(0, spikeLength);\n    }\n    \n    move(force) {\n      if(force) {\n        this.vel.addTo(force);\n      }\n      if(this.vel.getLength() > spikeLength) {\n        this.vel.setLength(spikeLength);\n      }\n    }\n      \n    draw() {\n      ctx.beginPath();\n      ctx.moveTo(this.pos.x, this.pos.y);\n      let p2 = this.pos.add(this.vel);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();  \n    }  \n  }\n  \n  let canvas;\n  let ctx;\n  let w, h;\n  let hue;\n  let particles;\n  let spikeLength;\n  let planets;\n  let A;\n  let B;\n  let a;\n  let b;\n  let tick;\n  \n  function setup() {\n    tick = 0;\n    planets = [];\n    let len = Math.round(Math.random() * 3 + 3);\n    for(let i = 0; i < len; i++) {\n      let p = new Planet(50 + i * 100, 340, i ? 1000 : 4000);\n      planets.push(p);\n    }\n    canvas = document.querySelector(\"#repeller-canvas\");\n    ctx = canvas.getContext(\"2d\");\n    window.addEventListener(\"resize\", reset);\n    canvas.addEventListener(\"mousemove\", mousemove);\n    reset();\n  }\n  \n  function reset() {\n    hue = colorConfig.baseHue; \n    w = canvas.width = window.innerWidth;\n    h = canvas.height = window.innerHeight;\n    spikeLength = w * config.widthToSpikeLengthRatio;\n    A = w / 2.2;\n    B = h / 2.2;\n    a = Math.round(Math.random() + 2);\n    b = Math.round(Math.random() + 2);\n    drawText();\n  }\n  \n  function mousemove(event) {\n    let x = event.clientX;\n    let y = event.clientY;\n    planets[0].pos.x = x;\n    planets[0].pos.y = y;\n  }\n  \n  function draw(now) {\n    clear();\n    requestAnimationFrame(draw);\n    updateParticles();\n    updatePlanets();\n    tick = now / 50;\n  }\n  \n  function clear() {\n    ctx.clearRect(0, 0, w, h);\n  }\n  \n  function drawText() {\n    ctx.save();\n    let fontSize = w * 0.2;\n    ctx.font = \"bold \" + fontSize + \"px Arial, Helvetica, sans-serif\";\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\"\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = \"white\";\n    ctx.strokeText(config.text, w/2, h/2);\n    ctx.restore();\n    let imageData = ctx.getImageData(0, 0, w, h);\n  \n    particles = [];\n  \n    for(let x = 0; x < w; x++) {\n      for(let y = 0; y < h; y++) {\n        let i = (x + w*y)*4;\n        let average = (imageData.data[i] + \n                       imageData.data[i + 1] + \n                       imageData.data[i + 2] +\n                       imageData.data[i + 3]) / 4;\n        if(average > 200) {\n          let particle = new Particle(x, y);\n          particles.push(particle);\n        }\n      }\n    }\n    clear();\n  }\n  \n  function updatePlanets() {\n    let len = planets.length;\n    for(let i = 1; i < len; i++) {\n      let angle = Math.PI * 2 / (len - 1) * i;\n      let x = A * Math.sin(a * tick / 100 + angle) + w/2;\n      let y = B * Math.sin(b * tick / 100 + angle) + h/2; \n      let p = planets[i];\n      p.pos.x = x;\n      p.pos.y = y;\n      p.draw();\n    }\n  }\n  \n  function updateParticles() {\n    hue += colorConfig.hueSpeed; \n    let h = Math.sin(hue) * colorConfig.hueRange + colorConfig.baseHue;\n    ctx.strokeStyle = `hsla(${h}, ${colorConfig.colorSaturation}%, 50%, ${colorConfig.particleOpacity})`;  \n    particles.forEach(p => {\n      // Apply the force of each planet (repeller) to the current particle\n      planets.forEach(planet => {\n        let d = p.pos.sub(planet.pos);\n        let length = d.getLength();\n        let g = planet.g / length;\n        if(g > 40) {\n          g = 40;\n        }\n        // We keep the angle of the distance\n        d.setLength(g);\n        p.move(d);\n      });\n      p.draw();\n    });\n  }\n    console.log('fdasfs')\n    setup();\n    draw(1);\n  return (\n    <canvas id=\"repeller-canvas\"></canvas>\n  )\n};\n\nexport default Repeller;\n\n\n\n  \n  \n  "]},"metadata":{},"sourceType":"module"}