{"ast":null,"code":"var _jsxFileName = \"/Users/Work/Documents/Projects/School/SS2022/ARCH8803/LIMW-Blue/bridge-viz-test/src/components/Animations/repeller.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Repeller = transcript => {\n  //   const config = {\n  //     text: `Say something\n  //     positive.`,\n  //     widthToSpikeLengthRatio: 0.054\n  //   };\n  //   const colorConfig = {\n  //     particleOpacity: 0.2,\n  //     baseHue: 350,\n  //     hueRange: 9,\n  //     hueSpeed: 0.04,\n  //     colorSaturation: 100,\n  //   };\n  //   class Planet {\n  //     constructor(x, y, g) {\n  //       this.pos = new Vector(x, y);\n  //       this.g = g;\n  //     }\n  //     draw() {\n  //       ctx.fillStyle = \"transparent\";\n  //       ctx.beginPath();\n  //       ctx.arc(this.pos.x, this.pos.y, 8, 0, Math.PI * 2);\n  //       ctx.fill();  \n  //     } \n  //   }\n  //   // A line that is part of forming the text\n  //   class Particle {\n  //     constructor(x, y) {\n  //       this.pos = new Vector(x, y);\n  //       this.vel = new Vector(0, spikeLength);\n  //     }\n  //     move(force) {\n  //       if(force) {\n  //         this.vel.addTo(force);\n  //       }\n  //       if(this.vel.getLength() > spikeLength) {\n  //         this.vel.setLength(spikeLength);\n  //       }\n  //     }\n  //     draw() {\n  //       ctx.beginPath();\n  //       ctx.moveTo(this.pos.x, this.pos.y);\n  //       let p2 = this.pos.add(this.vel);\n  //       ctx.lineTo(p2.x, p2.y);\n  //       ctx.stroke();  \n  //     }  \n  //   }\n  //   let canvas;\n  //   let ctx;\n  //   let w, h;\n  //   let hue;\n  //   let particles;\n  //   let spikeLength;\n  //   let planets;\n  //   let A;\n  //   let B;\n  //   let a;\n  //   let b;\n  //   let tick;\n  //   function setup() {\n  //     tick = 0;\n  //     planets = [];\n  //     let len = Math.round(Math.random() * 3 + 3);\n  //     for(let i = 0; i < len; i++) {\n  //       let p = new Planet(50 + i * 100, 340, i ? 1000 : 4000);\n  //       planets.push(p);\n  //     }\n  //     canvas = document.querySelector(\"#repeller-canvas\");\n  //     ctx = canvas.getContext(\"2d\");\n  //     window.addEventListener(\"resize\", reset);\n  //     canvas.addEventListener(\"mousemove\", mousemove);\n  //     reset();\n  //   }\n  //   function reset() {\n  //     hue = colorConfig.baseHue; \n  //     w = canvas.width = window.innerWidth;\n  //     h = canvas.height = window.innerHeight;\n  //     spikeLength = w * config.widthToSpikeLengthRatio;\n  //     A = w / 2.2;\n  //     B = h / 2.2;\n  //     a = Math.round(Math.random() + 2);\n  //     b = Math.round(Math.random() + 2);\n  //     drawText();\n  //   }\n  //   function mousemove(event) {\n  //     let x = event.clientX;\n  //     let y = event.clientY;\n  //     planets[0].pos.x = x;\n  //     planets[0].pos.y = y;\n  //   }\n  //   function draw(now) {\n  //     clear();\n  //     requestAnimationFrame(draw);\n  //     updateParticles();\n  //     updatePlanets();\n  //     tick = now / 50;\n  //   }\n  //   function clear() {\n  //     ctx.clearRect(0, 0, w, h);\n  //   }\n  //   function drawText() {\n  //     ctx.save();\n  //     let fontSize = w * 0.2;\n  //     ctx.font = \"bold \" + fontSize + \"px Arial, Helvetica, sans-serif\";\n  //     ctx.textAlign = \"center\";\n  //     ctx.textBaseline = \"middle\"\n  //     ctx.lineWidth = 1;\n  //     ctx.strokeStyle = \"white\";\n  //     ctx.strokeText(config.text, w/2, h/2);\n  //     ctx.restore();\n  //     let imageData = ctx.getImageData(0, 0, w, h);\n  //     particles = [];\n  //     for(let x = 0; x < w; x++) {\n  //       for(let y = 0; y < h; y++) {\n  //         let i = (x + w*y)*4;\n  //         let average = (imageData.data[i] + \n  //                        imageData.data[i + 1] + \n  //                        imageData.data[i + 2] +\n  //                        imageData.data[i + 3]) / 4;\n  //         if(average > 200) {\n  //           let particle = new Particle(x, y);\n  //           particles.push(particle);\n  //         }\n  //       }\n  //     }\n  //     clear();\n  //   }\n  //   function updatePlanets() {\n  //     let len = planets.length;\n  //     for(let i = 1; i < len; i++) {\n  //       let angle = Math.PI * 2 / (len - 1) * i;\n  //       let x = A * Math.sin(a * tick / 100 + angle) + w/2;\n  //       let y = B * Math.sin(b * tick / 100 + angle) + h/2; \n  //       let p = planets[i];\n  //       p.pos.x = x;\n  //       p.pos.y = y;\n  //       p.draw();\n  //     }\n  //   }\n  //   function updateParticles() {\n  //     hue += colorConfig.hueSpeed; \n  //     let h = Math.sin(hue) * colorConfig.hueRange + colorConfig.baseHue;\n  //     ctx.strokeStyle = `hsla(${h}, ${colorConfig.colorSaturation}%, 50%, ${colorConfig.particleOpacity})`;  \n  //     particles.forEach(p => {\n  //       // Apply the force of each planet (repeller) to the current particle\n  //       planets.forEach(planet => {\n  //         let d = p.pos.sub(planet.pos);\n  //         let length = d.getLength();\n  //         let g = planet.g / length;\n  //         if(g > 40) {\n  //           g = 40;\n  //         }\n  //         // We keep the angle of the distance\n  //         d.setLength(g);\n  //         p.move(d);\n  //       });\n  //       p.draw();\n  //     });\n  //   }\n  //     console.log('fdasfs')\n  //     setup();\n  //     draw(1);\n  console.log(transcript);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"repeller-canvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Repeller;\nexport default Repeller;\n\nvar _c;\n\n$RefreshReg$(_c, \"Repeller\");","map":{"version":3,"sources":["/Users/Work/Documents/Projects/School/SS2022/ARCH8803/LIMW-Blue/bridge-viz-test/src/components/Animations/repeller.js"],"names":["Repeller","transcript","console","log"],"mappings":";;;AACA,MAAMA,QAAQ,GAAKC,UAAD,IAAgB;AAClsBACE;AAAK,IAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CAxLD;;KAAMD,Q;AA0LN,eAAeA,QAAf","sourcesContent":["\nconst Repeller  = (transcript) => {\n//   const config = {\n//     text: `Say something\n//     positive.`,\n//     widthToSpikeLengthRatio: 0.054\n//   };\n  \n//   const colorConfig = {\n//     particleOpacity: 0.2,\n//     baseHue: 350,\n//     hueRange: 9,\n//     hueSpeed: 0.04,\n//     colorSaturation: 100,\n//   };\n  \n//   class Planet {\n//     constructor(x, y, g) {\n//       this.pos = new Vector(x, y);\n//       this.g = g;\n//     }\n    \n//     draw() {\n//       ctx.fillStyle = \"transparent\";\n//       ctx.beginPath();\n//       ctx.arc(this.pos.x, this.pos.y, 8, 0, Math.PI * 2);\n//       ctx.fill();  \n//     } \n//   }\n  \n//   // A line that is part of forming the text\n//   class Particle {\n//     constructor(x, y) {\n//       this.pos = new Vector(x, y);\n//       this.vel = new Vector(0, spikeLength);\n//     }\n    \n//     move(force) {\n//       if(force) {\n//         this.vel.addTo(force);\n//       }\n//       if(this.vel.getLength() > spikeLength) {\n//         this.vel.setLength(spikeLength);\n//       }\n//     }\n      \n//     draw() {\n//       ctx.beginPath();\n//       ctx.moveTo(this.pos.x, this.pos.y);\n//       let p2 = this.pos.add(this.vel);\n//       ctx.lineTo(p2.x, p2.y);\n//       ctx.stroke();  \n//     }  \n//   }\n  \n//   let canvas;\n//   let ctx;\n//   let w, h;\n//   let hue;\n//   let particles;\n//   let spikeLength;\n//   let planets;\n//   let A;\n//   let B;\n//   let a;\n//   let b;\n//   let tick;\n  \n//   function setup() {\n//     tick = 0;\n//     planets = [];\n//     let len = Math.round(Math.random() * 3 + 3);\n//     for(let i = 0; i < len; i++) {\n//       let p = new Planet(50 + i * 100, 340, i ? 1000 : 4000);\n//       planets.push(p);\n//     }\n//     canvas = document.querySelector(\"#repeller-canvas\");\n//     ctx = canvas.getContext(\"2d\");\n//     window.addEventListener(\"resize\", reset);\n//     canvas.addEventListener(\"mousemove\", mousemove);\n//     reset();\n//   }\n  \n//   function reset() {\n//     hue = colorConfig.baseHue; \n//     w = canvas.width = window.innerWidth;\n//     h = canvas.height = window.innerHeight;\n//     spikeLength = w * config.widthToSpikeLengthRatio;\n//     A = w / 2.2;\n//     B = h / 2.2;\n//     a = Math.round(Math.random() + 2);\n//     b = Math.round(Math.random() + 2);\n//     drawText();\n//   }\n  \n//   function mousemove(event) {\n//     let x = event.clientX;\n//     let y = event.clientY;\n//     planets[0].pos.x = x;\n//     planets[0].pos.y = y;\n//   }\n  \n//   function draw(now) {\n//     clear();\n//     requestAnimationFrame(draw);\n//     updateParticles();\n//     updatePlanets();\n//     tick = now / 50;\n//   }\n  \n//   function clear() {\n//     ctx.clearRect(0, 0, w, h);\n//   }\n  \n//   function drawText() {\n//     ctx.save();\n//     let fontSize = w * 0.2;\n//     ctx.font = \"bold \" + fontSize + \"px Arial, Helvetica, sans-serif\";\n//     ctx.textAlign = \"center\";\n//     ctx.textBaseline = \"middle\"\n//     ctx.lineWidth = 1;\n//     ctx.strokeStyle = \"white\";\n//     ctx.strokeText(config.text, w/2, h/2);\n//     ctx.restore();\n//     let imageData = ctx.getImageData(0, 0, w, h);\n  \n//     particles = [];\n  \n//     for(let x = 0; x < w; x++) {\n//       for(let y = 0; y < h; y++) {\n//         let i = (x + w*y)*4;\n//         let average = (imageData.data[i] + \n//                        imageData.data[i + 1] + \n//                        imageData.data[i + 2] +\n//                        imageData.data[i + 3]) / 4;\n//         if(average > 200) {\n//           let particle = new Particle(x, y);\n//           particles.push(particle);\n//         }\n//       }\n//     }\n//     clear();\n//   }\n  \n//   function updatePlanets() {\n//     let len = planets.length;\n//     for(let i = 1; i < len; i++) {\n//       let angle = Math.PI * 2 / (len - 1) * i;\n//       let x = A * Math.sin(a * tick / 100 + angle) + w/2;\n//       let y = B * Math.sin(b * tick / 100 + angle) + h/2; \n//       let p = planets[i];\n//       p.pos.x = x;\n//       p.pos.y = y;\n//       p.draw();\n//     }\n//   }\n  \n//   function updateParticles() {\n//     hue += colorConfig.hueSpeed; \n//     let h = Math.sin(hue) * colorConfig.hueRange + colorConfig.baseHue;\n//     ctx.strokeStyle = `hsla(${h}, ${colorConfig.colorSaturation}%, 50%, ${colorConfig.particleOpacity})`;  \n//     particles.forEach(p => {\n//       // Apply the force of each planet (repeller) to the current particle\n//       planets.forEach(planet => {\n//         let d = p.pos.sub(planet.pos);\n//         let length = d.getLength();\n//         let g = planet.g / length;\n//         if(g > 40) {\n//           g = 40;\n//         }\n//         // We keep the angle of the distance\n//         d.setLength(g);\n//         p.move(d);\n//       });\n//       p.draw();\n//     });\n//   }\n//     console.log('fdasfs')\n//     setup();\n//     draw(1);\n\nconsole.log(transcript)\n  return (\n    <div id=\"repeller-canvas\"></div>\n  )\n};\n\nexport default Repeller;\n\n\n\n\n  \n  \n  "]},"metadata":{},"sourceType":"module"}