{"ast":null,"code":"var _jsxFileName = \"/Users/blue/Documents/Projects/LIMW-Blue/bridge-viz-test/src/components/Recorder.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport useSpeechToText from 'react-hook-speech-to-text';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Recorder = props => {\n  _s();\n\n  const {\n    error,\n    interimResult,\n    isRecording,\n    results,\n    startSpeechToText,\n    stopSpeechToText\n  } = useSpeechToText({\n    continuous: false,\n    useLegacyResults: false\n  });\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Web Speech API is not available in this browser \\uD83E\\uDD7A\\u200D\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Recording: \", isRecording.toString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: isRecording ? stopSpeechToText : startSpeechToText,\n      children: isRecording ? 'Stop Recording' : 'Start Recording'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: results.map(result => console.log(result))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Recorder, \"LS3ptDcLZlvsL0/IXD0UiAIUXp0=\", false, function () {\n  return [useSpeechToText];\n});\n\n_c = Recorder;\nexport default Recorder;\n\nvar _c;\n\n$RefreshReg$(_c, \"Recorder\");","map":{"version":3,"sources":["/Users/blue/Documents/Projects/LIMW-Blue/bridge-viz-test/src/components/Recorder.js"],"names":["React","useSpeechToText","Recorder","props","error","interimResult","isRecording","results","startSpeechToText","stopSpeechToText","continuous","useLegacyResults","toString","map","result","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,2BAA5B;;;AAEA,MAAMC,QAAQ,GAAGC,KAAK,IAAK;AAAA;;AACzB,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,OAJI;AAKJC,IAAAA,iBALI;AAMJC,IAAAA;AANI,MAOFR,eAAe,CAAC;AAClBS,IAAAA,UAAU,EAAE,KADM;AAElBC,IAAAA,gBAAgB,EAAE;AAFA,GAAD,CAPnB;AAYA,MAAIP,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,sBACE;AAAA,4BACE;AAAA,gCAAgBE,WAAW,CAACM,QAAZ,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAEN,WAAW,GAAGG,gBAAH,GAAsBD,iBAAlD;AAAA,gBACGF,WAAW,GAAG,gBAAH,GAAqB;AADnC;AAAA;AAAA;AAAA;AAAA,YAFF,eAKE;AAAA,gBACGC,OAAO,CAACM,GAAR,CAAaC,MAAD,IACTC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CADH;AADH;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA5BD;;GAAMZ,Q;UAQAD,e;;;KARAC,Q;AA8BN,eAAeA,QAAf","sourcesContent":["import React from 'react';\nimport useSpeechToText from 'react-hook-speech-to-text';\n\nconst Recorder = props =>  {\n  const {\n    error,\n    interimResult,\n    isRecording,\n    results,\n    startSpeechToText,\n    stopSpeechToText,\n  } = useSpeechToText({\n    continuous: false,\n    useLegacyResults: false\n  });\n\n  if (error) return <p>Web Speech API is not available in this browser ü•∫‚Äç</p>;\n  \n  return (\n    <div>\n      <h1>Recording: {isRecording.toString()}</h1>\n      <button onClick={isRecording ? stopSpeechToText : startSpeechToText}>\n        {isRecording ? 'Stop Recording': 'Start Recording'}\n      </button>\n      <ul>\n        {results.map((result) => (\n            console.log(result)\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Recorder;"]},"metadata":{},"sourceType":"module"}